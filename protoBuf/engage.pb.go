// Code generated by protoc-gen-go. DO NOT EDIT.
// source: engage.proto

package exercise

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Greeting struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Greeting) Reset()         { *m = Greeting{} }
func (m *Greeting) String() string { return proto.CompactTextString(m) }
func (*Greeting) ProtoMessage()    {}
func (*Greeting) Descriptor() ([]byte, []int) {
	return fileDescriptor_182042a4b26ac17b, []int{0}
}

func (m *Greeting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Greeting.Unmarshal(m, b)
}
func (m *Greeting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Greeting.Marshal(b, m, deterministic)
}
func (m *Greeting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Greeting.Merge(m, src)
}
func (m *Greeting) XXX_Size() int {
	return xxx_messageInfo_Greeting.Size(m)
}
func (m *Greeting) XXX_DiscardUnknown() {
	xxx_messageInfo_Greeting.DiscardUnknown(m)
}

var xxx_messageInfo_Greeting proto.InternalMessageInfo

func (m *Greeting) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Greeting) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Summary struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size                 int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Summary) Reset()         { *m = Summary{} }
func (m *Summary) String() string { return proto.CompactTextString(m) }
func (*Summary) ProtoMessage()    {}
func (*Summary) Descriptor() ([]byte, []int) {
	return fileDescriptor_182042a4b26ac17b, []int{1}
}

func (m *Summary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Summary.Unmarshal(m, b)
}
func (m *Summary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Summary.Marshal(b, m, deterministic)
}
func (m *Summary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Summary.Merge(m, src)
}
func (m *Summary) XXX_Size() int {
	return xxx_messageInfo_Summary.Size(m)
}
func (m *Summary) XXX_DiscardUnknown() {
	xxx_messageInfo_Summary.DiscardUnknown(m)
}

var xxx_messageInfo_Summary proto.InternalMessageInfo

func (m *Summary) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Summary) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

// Request containing the user's name.
type Request struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ask                  int32    `protobuf:"varint,2,opt,name=ask,proto3" json:"ask,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_182042a4b26ac17b, []int{2}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Request) GetAsk() int32 {
	if m != nil {
		return m.Ask
	}
	return 0
}

// Response message containing any data
type Response struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_182042a4b26ac17b, []int{3}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Response) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*Greeting)(nil), "exercise.Greeting")
	proto.RegisterType((*Summary)(nil), "exercise.Summary")
	proto.RegisterType((*Request)(nil), "exercise.Request")
	proto.RegisterType((*Response)(nil), "exercise.Response")
}

func init() { proto.RegisterFile("engage.proto", fileDescriptor_182042a4b26ac17b) }

var fileDescriptor_182042a4b26ac17b = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x31, 0x4f, 0xf3, 0x30,
	0x10, 0x86, 0xe3, 0xef, 0x6b, 0x9b, 0x70, 0xea, 0x00, 0xc7, 0x12, 0x75, 0xaa, 0x3c, 0x75, 0x0a,
	0x2d, 0x08, 0xa9, 0x73, 0x04, 0x42, 0x0c, 0x48, 0x55, 0xfa, 0x0b, 0xdc, 0x70, 0x18, 0x0b, 0xd9,
	0x0e, 0xb6, 0x2b, 0x51, 0x7e, 0x13, 0x3f, 0x12, 0xc5, 0x24, 0xd0, 0x21, 0xdd, 0x5e, 0xbf, 0xba,
	0x47, 0xf6, 0xe3, 0x83, 0x29, 0x19, 0x29, 0x24, 0x15, 0x8d, 0xb3, 0xc1, 0x62, 0x46, 0x1f, 0xe4,
	0x6a, 0xe5, 0x89, 0x2f, 0x21, 0x7b, 0x70, 0x44, 0x41, 0x19, 0x89, 0x08, 0x23, 0x23, 0x34, 0xe5,
	0x6c, 0xce, 0x16, 0x67, 0x55, 0xcc, 0x78, 0x0e, 0xff, 0xb5, 0x97, 0xf9, 0xbf, 0x58, 0xb5, 0x91,
	0xaf, 0x20, 0xdd, 0xee, 0xb5, 0x16, 0xee, 0x30, 0x08, 0x20, 0x8c, 0xbc, 0xfa, 0xa4, 0x48, 0x8c,
	0xab, 0x98, 0xf9, 0x15, 0xa4, 0x15, 0xbd, 0xef, 0xc9, 0x87, 0x53, 0x77, 0x08, 0xff, 0xd6, 0x11,
	0x6d, 0xe4, 0x6b, 0xc8, 0x2a, 0xf2, 0x8d, 0x35, 0x9e, 0x06, 0x89, 0x1c, 0xd2, 0xda, 0x9a, 0x40,
	0x26, 0x74, 0x2f, 0xeb, 0x8f, 0xd7, 0x5f, 0x0c, 0x26, 0xf7, 0x51, 0x15, 0x57, 0x30, 0x8e, 0x6a,
	0x88, 0x45, 0xaf, 0x5b, 0xf4, 0xae, 0xb3, 0x81, 0x8e, 0x27, 0xb8, 0x86, 0xe9, 0xe3, 0x33, 0x99,
	0xa0, 0x5e, 0x0e, 0x77, 0x22, 0x08, 0xbc, 0xf8, 0x9b, 0xea, 0x04, 0x66, 0x47, 0x55, 0xf7, 0x0d,
	0x3c, 0x59, 0x30, 0xbc, 0x85, 0x6c, 0xfb, 0xaa, 0x9a, 0x53, 0x14, 0x1e, 0x57, 0x3f, 0x62, 0x3c,
	0x59, 0xb2, 0x72, 0x0e, 0x97, 0xca, 0x16, 0xd2, 0x35, 0x75, 0xb1, 0xd3, 0xbf, 0x33, 0x65, 0x5a,
	0x3e, 0x6d, 0xda, 0x45, 0x6d, 0xd8, 0x6e, 0x12, 0x37, 0x76, 0xf3, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0x35, 0x52, 0xc5, 0xfa, 0xc1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EngageClient is the client API for Engage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EngageClient interface {
	// A simple RPC.
	// Accepts a greeting, returns a greeting.
	Greet(ctx context.Context, in *Greeting, opts ...grpc.CallOption) (*Greeting, error)
	// A client-to-server streaming RPC.
	// Accepts a stream of Asks, returns a Summary after
	// all requests are processed.
	IdentifyData(ctx context.Context, opts ...grpc.CallOption) (Engage_IdentifyDataClient, error)
	// A server-to-client streaming RPC.
	// Transmits necessary content for each request registered
	// from the client.
	ShipData(ctx context.Context, in *Request, opts ...grpc.CallOption) (Engage_ShipDataClient, error)
}

type engageClient struct {
	cc *grpc.ClientConn
}

func NewEngageClient(cc *grpc.ClientConn) EngageClient {
	return &engageClient{cc}
}

func (c *engageClient) Greet(ctx context.Context, in *Greeting, opts ...grpc.CallOption) (*Greeting, error) {
	out := new(Greeting)
	err := c.cc.Invoke(ctx, "/exercise.Engage/Greet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engageClient) IdentifyData(ctx context.Context, opts ...grpc.CallOption) (Engage_IdentifyDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Engage_serviceDesc.Streams[0], "/exercise.Engage/IdentifyData", opts...)
	if err != nil {
		return nil, err
	}
	x := &engageIdentifyDataClient{stream}
	return x, nil
}

type Engage_IdentifyDataClient interface {
	Send(*Request) error
	CloseAndRecv() (*Summary, error)
	grpc.ClientStream
}

type engageIdentifyDataClient struct {
	grpc.ClientStream
}

func (x *engageIdentifyDataClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *engageIdentifyDataClient) CloseAndRecv() (*Summary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Summary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *engageClient) ShipData(ctx context.Context, in *Request, opts ...grpc.CallOption) (Engage_ShipDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Engage_serviceDesc.Streams[1], "/exercise.Engage/ShipData", opts...)
	if err != nil {
		return nil, err
	}
	x := &engageShipDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Engage_ShipDataClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type engageShipDataClient struct {
	grpc.ClientStream
}

func (x *engageShipDataClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EngageServer is the server API for Engage service.
type EngageServer interface {
	// A simple RPC.
	// Accepts a greeting, returns a greeting.
	Greet(context.Context, *Greeting) (*Greeting, error)
	// A client-to-server streaming RPC.
	// Accepts a stream of Asks, returns a Summary after
	// all requests are processed.
	IdentifyData(Engage_IdentifyDataServer) error
	// A server-to-client streaming RPC.
	// Transmits necessary content for each request registered
	// from the client.
	ShipData(*Request, Engage_ShipDataServer) error
}

func RegisterEngageServer(s *grpc.Server, srv EngageServer) {
	s.RegisterService(&_Engage_serviceDesc, srv)
}

func _Engage_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Greeting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngageServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exercise.Engage/Greet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngageServer).Greet(ctx, req.(*Greeting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engage_IdentifyData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EngageServer).IdentifyData(&engageIdentifyDataServer{stream})
}

type Engage_IdentifyDataServer interface {
	SendAndClose(*Summary) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type engageIdentifyDataServer struct {
	grpc.ServerStream
}

func (x *engageIdentifyDataServer) SendAndClose(m *Summary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *engageIdentifyDataServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Engage_ShipData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EngageServer).ShipData(m, &engageShipDataServer{stream})
}

type Engage_ShipDataServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type engageShipDataServer struct {
	grpc.ServerStream
}

func (x *engageShipDataServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _Engage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exercise.Engage",
	HandlerType: (*EngageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _Engage_Greet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IdentifyData",
			Handler:       _Engage_IdentifyData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ShipData",
			Handler:       _Engage_ShipData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "engage.proto",
}
